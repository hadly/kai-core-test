#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Recording management communication interface.
  """
  def registerDevice(self, deviceId, deviceDetails):
    """
    Register device to Recording Management Server.
    (1) deviceId - Device ID
    (2) deviceDetails - Detailed information of the device for recording, example of the json string:
                        {"server-id":11,"type":"dahua-dvr","device-key":"d0:27:88:e7:70:ad","channel-count":4,"stream-type":"h264","publisher":"tcp://10.101.10.210:17011"}
                        fields specification:
                        "server-id" - device server id
                        "type" - device server type
                        "device-key" - device key
                        "channel-count" - channel count of this kind of device
                        "stream-type" - type of the stream, can be "h264"/"mpeg4"/"gsensor"/"jpeg" ...
                        "publisher" - interface device server used for publish stream
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - deviceDetails
    """
    pass

  def deregisterDevice(self, deviceId):
    """
    Deregister device from Recording Management Server.
    (1) deviceId - Device ID
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
    """
    pass

  def registerRecordingServer(self, serverId, serverDetails):
    """
    Register recording server to Recording Management Server.
    (1) serverId - Recording Server ID
    (2) serverDetails - Detailed information of the recording server for recording, example of the json string:
                        {"streams":4,"max-streams":128,"free-space":2048,"total-space":10240,"cpu-cost":20,"mem-cost",30,"host":"10.101.10.210","port":18010}
                        fields specification:
                        "streams" - the count of channel streams recording
                        "max-streams" - the limit of "streams"
                        "free-space" - available disk space, unit: MB
                        "total-space" - total disk space, unit: MB
                        "cpu-cost" - cpu usage percent, unit: CPU%
                        "mem-cost" - memory usage percent, unit: MEM%
                        "host" - recording server host, for thrift comms
                        "port" - recording server port, for thrift comms
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
     - serverDetails
    """
    pass

  def deregisterRecordingServer(self, serverId):
    """
    Deregister recording server from Recording Management Server.
    (1) serverId - Recording Server ID
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
    """
    pass


class Client(Iface):
  """
  Recording management communication interface.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def registerDevice(self, deviceId, deviceDetails):
    """
    Register device to Recording Management Server.
    (1) deviceId - Device ID
    (2) deviceDetails - Detailed information of the device for recording, example of the json string:
                        {"server-id":11,"type":"dahua-dvr","device-key":"d0:27:88:e7:70:ad","channel-count":4,"stream-type":"h264","publisher":"tcp://10.101.10.210:17011"}
                        fields specification:
                        "server-id" - device server id
                        "type" - device server type
                        "device-key" - device key
                        "channel-count" - channel count of this kind of device
                        "stream-type" - type of the stream, can be "h264"/"mpeg4"/"gsensor"/"jpeg" ...
                        "publisher" - interface device server used for publish stream
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - deviceDetails
    """
    self.send_registerDevice(deviceId, deviceDetails)
    return self.recv_registerDevice()

  def send_registerDevice(self, deviceId, deviceDetails):
    self._oprot.writeMessageBegin('registerDevice', TMessageType.CALL, self._seqid)
    args = registerDevice_args()
    args.deviceId = deviceId
    args.deviceDetails = deviceDetails
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = registerDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerDevice failed: unknown result");

  def deregisterDevice(self, deviceId):
    """
    Deregister device from Recording Management Server.
    (1) deviceId - Device ID
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
    """
    self.send_deregisterDevice(deviceId)
    return self.recv_deregisterDevice()

  def send_deregisterDevice(self, deviceId):
    self._oprot.writeMessageBegin('deregisterDevice', TMessageType.CALL, self._seqid)
    args = deregisterDevice_args()
    args.deviceId = deviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deregisterDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deregisterDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deregisterDevice failed: unknown result");

  def registerRecordingServer(self, serverId, serverDetails):
    """
    Register recording server to Recording Management Server.
    (1) serverId - Recording Server ID
    (2) serverDetails - Detailed information of the recording server for recording, example of the json string:
                        {"streams":4,"max-streams":128,"free-space":2048,"total-space":10240,"cpu-cost":20,"mem-cost",30,"host":"10.101.10.210","port":18010}
                        fields specification:
                        "streams" - the count of channel streams recording
                        "max-streams" - the limit of "streams"
                        "free-space" - available disk space, unit: MB
                        "total-space" - total disk space, unit: MB
                        "cpu-cost" - cpu usage percent, unit: CPU%
                        "mem-cost" - memory usage percent, unit: MEM%
                        "host" - recording server host, for thrift comms
                        "port" - recording server port, for thrift comms
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
     - serverDetails
    """
    self.send_registerRecordingServer(serverId, serverDetails)
    return self.recv_registerRecordingServer()

  def send_registerRecordingServer(self, serverId, serverDetails):
    self._oprot.writeMessageBegin('registerRecordingServer', TMessageType.CALL, self._seqid)
    args = registerRecordingServer_args()
    args.serverId = serverId
    args.serverDetails = serverDetails
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerRecordingServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = registerRecordingServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerRecordingServer failed: unknown result");

  def deregisterRecordingServer(self, serverId):
    """
    Deregister recording server from Recording Management Server.
    (1) serverId - Recording Server ID
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
    """
    self.send_deregisterRecordingServer(serverId)
    return self.recv_deregisterRecordingServer()

  def send_deregisterRecordingServer(self, serverId):
    self._oprot.writeMessageBegin('deregisterRecordingServer', TMessageType.CALL, self._seqid)
    args = deregisterRecordingServer_args()
    args.serverId = serverId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deregisterRecordingServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deregisterRecordingServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deregisterRecordingServer failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["registerDevice"] = Processor.process_registerDevice
    self._processMap["deregisterDevice"] = Processor.process_deregisterDevice
    self._processMap["registerRecordingServer"] = Processor.process_registerRecordingServer
    self._processMap["deregisterRecordingServer"] = Processor.process_deregisterRecordingServer

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_registerDevice(self, seqid, iprot, oprot):
    args = registerDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerDevice_result()
    result.success = self._handler.registerDevice(args.deviceId, args.deviceDetails)
    oprot.writeMessageBegin("registerDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deregisterDevice(self, seqid, iprot, oprot):
    args = deregisterDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deregisterDevice_result()
    result.success = self._handler.deregisterDevice(args.deviceId)
    oprot.writeMessageBegin("deregisterDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerRecordingServer(self, seqid, iprot, oprot):
    args = registerRecordingServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerRecordingServer_result()
    result.success = self._handler.registerRecordingServer(args.serverId, args.serverDetails)
    oprot.writeMessageBegin("registerRecordingServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deregisterRecordingServer(self, seqid, iprot, oprot):
    args = deregisterRecordingServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deregisterRecordingServer_result()
    result.success = self._handler.deregisterRecordingServer(args.serverId)
    oprot.writeMessageBegin("deregisterRecordingServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class registerDevice_args:
  """
  Attributes:
   - deviceId
   - deviceDetails
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.STRING, 'deviceDetails', None, None, ), # 2
  )

  def __init__(self, deviceId=None, deviceDetails=None,):
    self.deviceId = deviceId
    self.deviceDetails = deviceDetails

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.deviceDetails = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerDevice_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.deviceDetails is not None:
      oprot.writeFieldBegin('deviceDetails', TType.STRING, 2)
      oprot.writeString(self.deviceDetails)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerDevice_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deregisterDevice_args:
  """
  Attributes:
   - deviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
  )

  def __init__(self, deviceId=None,):
    self.deviceId = deviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deregisterDevice_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deregisterDevice_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deregisterDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerRecordingServer_args:
  """
  Attributes:
   - serverId
   - serverDetails
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'serverId', None, None, ), # 1
    (2, TType.STRING, 'serverDetails', None, None, ), # 2
  )

  def __init__(self, serverId=None, serverDetails=None,):
    self.serverId = serverId
    self.serverDetails = serverDetails

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.serverId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverDetails = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerRecordingServer_args')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.I64, 1)
      oprot.writeI64(self.serverId)
      oprot.writeFieldEnd()
    if self.serverDetails is not None:
      oprot.writeFieldBegin('serverDetails', TType.STRING, 2)
      oprot.writeString(self.serverDetails)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerRecordingServer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerRecordingServer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deregisterRecordingServer_args:
  """
  Attributes:
   - serverId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'serverId', None, None, ), # 1
  )

  def __init__(self, serverId=None,):
    self.serverId = serverId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.serverId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deregisterRecordingServer_args')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.I64, 1)
      oprot.writeI64(self.serverId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deregisterRecordingServer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deregisterRecordingServer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
