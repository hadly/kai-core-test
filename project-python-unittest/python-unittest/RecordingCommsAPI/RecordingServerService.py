#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Recording Server communication interface.
  """
  def getServerID(self, ):
    """
    Get the id of this recording server.
    """
    pass

  def getDevices(self, ):
    """
    Get the ID of the devices recording or once recorded in this recording server.
    """
    pass

  def getRecordingDevices(self, ):
    """
    Get the ID of the devices recording in this recording server, a subset of "getDevices()".
    """
    pass

  def setGlobalConfiguration(self, configurations):
    """
    Set global recording configurations.
    (1) configurations - Detailed global configurations for recording server, example of the json string:
                        {"chunk-size":15,"reserved-space":5120,"cloud-server":"core.up.uat.kaisquare.com"}
                        fields specification:
                        "chunk-size" - the duration of each video recorded, unit: minute
                        "reserved-space" - reserved disk space for storage, unit: MB
                        "cloud-server" - cloud server where the videoes synchronize, or set to "localhost" not to synchronize
                        flexible for future extension
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - configurations
    """
    pass

  def setDeviceConfiguration(self, deviceId, channelIndex, configurations):
    """
    Set device recording configurations.
    (1) deviceId - Device ID.
    (2) channelIndex - The requested channel index.
    (3) configurations - Detailed device configurations, example of the json string:
                         {"stream-storage-limit":20480,"keep-days":7}
                         fields specification:
                         "stream-storage-limit" - max disk space occupied by one channel, unit: MB
                         "keep-days" - the days recording server keep the videoes
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channelIndex
     - configurations
    """
    pass

  def startRecordingTask(self, deviceId, taskType, taskInfo):
    """
    Starts a recording task for recording server.
    (1) deviceId - Device ID.
    (2) taskType - Recording task type, can be "video-recording"/"event-recording"
    (3) taskInfo - Additional information associated with the task, example of the json string:
                   for "video-recording"
                   {"device-key":"d0:27:88:e7:70:ad","type":"dahua-dvr","channel-count":4,"stream-type":"h264","publisher":"tcp://10.101.10.210:17011"}
                   fields specification:
                   "device-key" - see RecordingManagementService::registerDeviceServer(...) arguments specification
                   "type" - ditto
                   "channel-count" - ditto
                   "stream-type" - ditto
                   "publisher" - ditto
                   flexible for future extension
                   for "event-recording"
                   {"device-key":"d0:27:88:e7:70:ad",event-id":"5279d99be4b0a381f22beda1", "channel-index":0, "duration":10}
                   fields specification:
                   "device-key" - ditto
                   "event-id" - unique string to identify a event
                   "channel-index" - channel index of this device, start from 0
                   "duration" - duration of this event video, unit: second
                   flexible for future extension
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - taskType
     - taskInfo
    """
    pass

  def stopRecordingTask(self, deviceId):
    """
    Stops a recording task for recording server.
    (1) deviceId - Device ID.
    (2) taskType - Task type.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
    """
    pass

  def getEventVideo(self, deviceId, channelIndex, eventInfo):
    """
    Get event video link.
    (1) deviceId - Device ID.
    (2) channelIndex - The requested channel index.
    (2) eventInfo - Additional information associated with the event, example of the json string:
                    {"event-id":"5279d99be4b0a381f22beda1","action":"play"}
                    "event-id" - unique string to identify a event
                    "action" - requested action, can be "play"/"download"
    RETURN generated url of event video, or empty if not found.

    Parameters:
     - deviceId
     - channelIndex
     - eventInfo
    """
    pass

  def startStreamSession(self, sessionId, deviceId, channelIndex, streamInfo):
    """
    Start recording media session service and return the urls.
    (1) sessionId - Handle for this session for future reference.
    (2) deviceId - Unique id of the device whose recording is requested.
    (3) channelIndex - The requested channel index.
    (4) streamInfo - Additional information associated with the stream, example of the json string:
                     {"stream-type":"http/h264","begin":"07112013000000","end":"07112013101000","action":"play"}
                     fields specification:
                     "stream-type" - requested stream type, see StreamControlService::beginStreamSession(...) arguments specification
                     "begin" - DDMMYYYhhmmss GMT, begin date/time of the stream
                     "end" - DDMMYYYhhmmss GMT, end date/time of the stream
                     "action" - requested action, can be "play"/"download"
                     flexible for future extension
    RETURN the dynamically generated url list of stream, or empty list if not found.

    Parameters:
     - sessionId
     - deviceId
     - channelIndex
     - streamInfo
    """
    pass

  def stopStreamSession(self, sessionId):
    """
    Stop recording media session service.
    (1) sessionId - Handle for this session for future reference.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
    """
    pass

  def setSessionAccessControl(self, sessionId, ttl, allowedClientIpAddresses):
    """
    Set access control for a session, only accept connections for streaming from specified ip list.
    If this interface not called, the session is avaiable for all.
    (1) sessionId - Handle for this session for future reference.
    (2) ttl - UTC time stamp when this session becomes invalid, unit: second.
    (4) allowedClientIpAddresses - list of IP address can connect for streaming of this session.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
     - ttl
     - allowedClientIpAddresses
    """
    pass

  def getStreamList(self, deviceId, channelIndex, streamInfo):
    """
    Return recording media details.
    (1) deviceId - Unique id of the device whose recording is requested.
    (2) channelIndex - The requested channel index.
    (3) streamInfo - Additional information associated with the stream, example of the json string:
                     {"begin":"07112013000000","end":"07112013101000"}
                     fields specification:
                     "begin" - DDMMYYYhhmmss GMT, begin date/time of the stream
                     "end" - DDMMYYYhhmmss GMT, end date/time of the stream
                     flexible for future extension
    RETURN json formated stream details list, or empty list if not found, example of the json string:
                     {"from":"07112013000000","to":"07112013001500"}

    Parameters:
     - deviceId
     - channelIndex
     - streamInfo
    """
    pass

  def getStreamClients(self, deviceId, channelIndex, streamInfo):
    """
    Return recording media session clients.
    (1) deviceId - Unique id of the device whose recording is requested.
    (2) channelIndex - The requested channel index.
    (3) streamInfo - Additional information associated with the stream, example of the json string:
                     {"type":"rtmp/h264"}
                     flexible for future extension
    RETURN json formated stream client details list, or empty list if not found, example of the json string:
                     {"ip":"223.4.134.189","port":52168}

    Parameters:
     - deviceId
     - channelIndex
     - streamInfo
    """
    pass


class Client(Iface):
  """
  Recording Server communication interface.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getServerID(self, ):
    """
    Get the id of this recording server.
    """
    self.send_getServerID()
    return self.recv_getServerID()

  def send_getServerID(self, ):
    self._oprot.writeMessageBegin('getServerID', TMessageType.CALL, self._seqid)
    args = getServerID_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getServerID(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getServerID_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getServerID failed: unknown result");

  def getDevices(self, ):
    """
    Get the ID of the devices recording or once recorded in this recording server.
    """
    self.send_getDevices()
    return self.recv_getDevices()

  def send_getDevices(self, ):
    self._oprot.writeMessageBegin('getDevices', TMessageType.CALL, self._seqid)
    args = getDevices_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDevices(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDevices_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDevices failed: unknown result");

  def getRecordingDevices(self, ):
    """
    Get the ID of the devices recording in this recording server, a subset of "getDevices()".
    """
    self.send_getRecordingDevices()
    return self.recv_getRecordingDevices()

  def send_getRecordingDevices(self, ):
    self._oprot.writeMessageBegin('getRecordingDevices', TMessageType.CALL, self._seqid)
    args = getRecordingDevices_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRecordingDevices(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getRecordingDevices_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRecordingDevices failed: unknown result");

  def setGlobalConfiguration(self, configurations):
    """
    Set global recording configurations.
    (1) configurations - Detailed global configurations for recording server, example of the json string:
                        {"chunk-size":15,"reserved-space":5120,"cloud-server":"core.up.uat.kaisquare.com"}
                        fields specification:
                        "chunk-size" - the duration of each video recorded, unit: minute
                        "reserved-space" - reserved disk space for storage, unit: MB
                        "cloud-server" - cloud server where the videoes synchronize, or set to "localhost" not to synchronize
                        flexible for future extension
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - configurations
    """
    self.send_setGlobalConfiguration(configurations)
    return self.recv_setGlobalConfiguration()

  def send_setGlobalConfiguration(self, configurations):
    self._oprot.writeMessageBegin('setGlobalConfiguration', TMessageType.CALL, self._seqid)
    args = setGlobalConfiguration_args()
    args.configurations = configurations
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setGlobalConfiguration(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setGlobalConfiguration_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setGlobalConfiguration failed: unknown result");

  def setDeviceConfiguration(self, deviceId, channelIndex, configurations):
    """
    Set device recording configurations.
    (1) deviceId - Device ID.
    (2) channelIndex - The requested channel index.
    (3) configurations - Detailed device configurations, example of the json string:
                         {"stream-storage-limit":20480,"keep-days":7}
                         fields specification:
                         "stream-storage-limit" - max disk space occupied by one channel, unit: MB
                         "keep-days" - the days recording server keep the videoes
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channelIndex
     - configurations
    """
    self.send_setDeviceConfiguration(deviceId, channelIndex, configurations)
    return self.recv_setDeviceConfiguration()

  def send_setDeviceConfiguration(self, deviceId, channelIndex, configurations):
    self._oprot.writeMessageBegin('setDeviceConfiguration', TMessageType.CALL, self._seqid)
    args = setDeviceConfiguration_args()
    args.deviceId = deviceId
    args.channelIndex = channelIndex
    args.configurations = configurations
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setDeviceConfiguration(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setDeviceConfiguration_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setDeviceConfiguration failed: unknown result");

  def startRecordingTask(self, deviceId, taskType, taskInfo):
    """
    Starts a recording task for recording server.
    (1) deviceId - Device ID.
    (2) taskType - Recording task type, can be "video-recording"/"event-recording"
    (3) taskInfo - Additional information associated with the task, example of the json string:
                   for "video-recording"
                   {"device-key":"d0:27:88:e7:70:ad","type":"dahua-dvr","channel-count":4,"stream-type":"h264","publisher":"tcp://10.101.10.210:17011"}
                   fields specification:
                   "device-key" - see RecordingManagementService::registerDeviceServer(...) arguments specification
                   "type" - ditto
                   "channel-count" - ditto
                   "stream-type" - ditto
                   "publisher" - ditto
                   flexible for future extension
                   for "event-recording"
                   {"device-key":"d0:27:88:e7:70:ad",event-id":"5279d99be4b0a381f22beda1", "channel-index":0, "duration":10}
                   fields specification:
                   "device-key" - ditto
                   "event-id" - unique string to identify a event
                   "channel-index" - channel index of this device, start from 0
                   "duration" - duration of this event video, unit: second
                   flexible for future extension
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - taskType
     - taskInfo
    """
    self.send_startRecordingTask(deviceId, taskType, taskInfo)
    return self.recv_startRecordingTask()

  def send_startRecordingTask(self, deviceId, taskType, taskInfo):
    self._oprot.writeMessageBegin('startRecordingTask', TMessageType.CALL, self._seqid)
    args = startRecordingTask_args()
    args.deviceId = deviceId
    args.taskType = taskType
    args.taskInfo = taskInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_startRecordingTask(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = startRecordingTask_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "startRecordingTask failed: unknown result");

  def stopRecordingTask(self, deviceId):
    """
    Stops a recording task for recording server.
    (1) deviceId - Device ID.
    (2) taskType - Task type.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
    """
    self.send_stopRecordingTask(deviceId)
    return self.recv_stopRecordingTask()

  def send_stopRecordingTask(self, deviceId):
    self._oprot.writeMessageBegin('stopRecordingTask', TMessageType.CALL, self._seqid)
    args = stopRecordingTask_args()
    args.deviceId = deviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stopRecordingTask(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stopRecordingTask_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stopRecordingTask failed: unknown result");

  def getEventVideo(self, deviceId, channelIndex, eventInfo):
    """
    Get event video link.
    (1) deviceId - Device ID.
    (2) channelIndex - The requested channel index.
    (2) eventInfo - Additional information associated with the event, example of the json string:
                    {"event-id":"5279d99be4b0a381f22beda1","action":"play"}
                    "event-id" - unique string to identify a event
                    "action" - requested action, can be "play"/"download"
    RETURN generated url of event video, or empty if not found.

    Parameters:
     - deviceId
     - channelIndex
     - eventInfo
    """
    self.send_getEventVideo(deviceId, channelIndex, eventInfo)
    return self.recv_getEventVideo()

  def send_getEventVideo(self, deviceId, channelIndex, eventInfo):
    self._oprot.writeMessageBegin('getEventVideo', TMessageType.CALL, self._seqid)
    args = getEventVideo_args()
    args.deviceId = deviceId
    args.channelIndex = channelIndex
    args.eventInfo = eventInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getEventVideo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getEventVideo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getEventVideo failed: unknown result");

  def startStreamSession(self, sessionId, deviceId, channelIndex, streamInfo):
    """
    Start recording media session service and return the urls.
    (1) sessionId - Handle for this session for future reference.
    (2) deviceId - Unique id of the device whose recording is requested.
    (3) channelIndex - The requested channel index.
    (4) streamInfo - Additional information associated with the stream, example of the json string:
                     {"stream-type":"http/h264","begin":"07112013000000","end":"07112013101000","action":"play"}
                     fields specification:
                     "stream-type" - requested stream type, see StreamControlService::beginStreamSession(...) arguments specification
                     "begin" - DDMMYYYhhmmss GMT, begin date/time of the stream
                     "end" - DDMMYYYhhmmss GMT, end date/time of the stream
                     "action" - requested action, can be "play"/"download"
                     flexible for future extension
    RETURN the dynamically generated url list of stream, or empty list if not found.

    Parameters:
     - sessionId
     - deviceId
     - channelIndex
     - streamInfo
    """
    self.send_startStreamSession(sessionId, deviceId, channelIndex, streamInfo)
    return self.recv_startStreamSession()

  def send_startStreamSession(self, sessionId, deviceId, channelIndex, streamInfo):
    self._oprot.writeMessageBegin('startStreamSession', TMessageType.CALL, self._seqid)
    args = startStreamSession_args()
    args.sessionId = sessionId
    args.deviceId = deviceId
    args.channelIndex = channelIndex
    args.streamInfo = streamInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_startStreamSession(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = startStreamSession_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "startStreamSession failed: unknown result");

  def stopStreamSession(self, sessionId):
    """
    Stop recording media session service.
    (1) sessionId - Handle for this session for future reference.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
    """
    self.send_stopStreamSession(sessionId)
    return self.recv_stopStreamSession()

  def send_stopStreamSession(self, sessionId):
    self._oprot.writeMessageBegin('stopStreamSession', TMessageType.CALL, self._seqid)
    args = stopStreamSession_args()
    args.sessionId = sessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stopStreamSession(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stopStreamSession_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stopStreamSession failed: unknown result");

  def setSessionAccessControl(self, sessionId, ttl, allowedClientIpAddresses):
    """
    Set access control for a session, only accept connections for streaming from specified ip list.
    If this interface not called, the session is avaiable for all.
    (1) sessionId - Handle for this session for future reference.
    (2) ttl - UTC time stamp when this session becomes invalid, unit: second.
    (4) allowedClientIpAddresses - list of IP address can connect for streaming of this session.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
     - ttl
     - allowedClientIpAddresses
    """
    self.send_setSessionAccessControl(sessionId, ttl, allowedClientIpAddresses)
    return self.recv_setSessionAccessControl()

  def send_setSessionAccessControl(self, sessionId, ttl, allowedClientIpAddresses):
    self._oprot.writeMessageBegin('setSessionAccessControl', TMessageType.CALL, self._seqid)
    args = setSessionAccessControl_args()
    args.sessionId = sessionId
    args.ttl = ttl
    args.allowedClientIpAddresses = allowedClientIpAddresses
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setSessionAccessControl(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setSessionAccessControl_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setSessionAccessControl failed: unknown result");

  def getStreamList(self, deviceId, channelIndex, streamInfo):
    """
    Return recording media details.
    (1) deviceId - Unique id of the device whose recording is requested.
    (2) channelIndex - The requested channel index.
    (3) streamInfo - Additional information associated with the stream, example of the json string:
                     {"begin":"07112013000000","end":"07112013101000"}
                     fields specification:
                     "begin" - DDMMYYYhhmmss GMT, begin date/time of the stream
                     "end" - DDMMYYYhhmmss GMT, end date/time of the stream
                     flexible for future extension
    RETURN json formated stream details list, or empty list if not found, example of the json string:
                     {"from":"07112013000000","to":"07112013001500"}

    Parameters:
     - deviceId
     - channelIndex
     - streamInfo
    """
    self.send_getStreamList(deviceId, channelIndex, streamInfo)
    return self.recv_getStreamList()

  def send_getStreamList(self, deviceId, channelIndex, streamInfo):
    self._oprot.writeMessageBegin('getStreamList', TMessageType.CALL, self._seqid)
    args = getStreamList_args()
    args.deviceId = deviceId
    args.channelIndex = channelIndex
    args.streamInfo = streamInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getStreamList(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getStreamList_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getStreamList failed: unknown result");

  def getStreamClients(self, deviceId, channelIndex, streamInfo):
    """
    Return recording media session clients.
    (1) deviceId - Unique id of the device whose recording is requested.
    (2) channelIndex - The requested channel index.
    (3) streamInfo - Additional information associated with the stream, example of the json string:
                     {"type":"rtmp/h264"}
                     flexible for future extension
    RETURN json formated stream client details list, or empty list if not found, example of the json string:
                     {"ip":"223.4.134.189","port":52168}

    Parameters:
     - deviceId
     - channelIndex
     - streamInfo
    """
    self.send_getStreamClients(deviceId, channelIndex, streamInfo)
    return self.recv_getStreamClients()

  def send_getStreamClients(self, deviceId, channelIndex, streamInfo):
    self._oprot.writeMessageBegin('getStreamClients', TMessageType.CALL, self._seqid)
    args = getStreamClients_args()
    args.deviceId = deviceId
    args.channelIndex = channelIndex
    args.streamInfo = streamInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getStreamClients(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getStreamClients_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getStreamClients failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getServerID"] = Processor.process_getServerID
    self._processMap["getDevices"] = Processor.process_getDevices
    self._processMap["getRecordingDevices"] = Processor.process_getRecordingDevices
    self._processMap["setGlobalConfiguration"] = Processor.process_setGlobalConfiguration
    self._processMap["setDeviceConfiguration"] = Processor.process_setDeviceConfiguration
    self._processMap["startRecordingTask"] = Processor.process_startRecordingTask
    self._processMap["stopRecordingTask"] = Processor.process_stopRecordingTask
    self._processMap["getEventVideo"] = Processor.process_getEventVideo
    self._processMap["startStreamSession"] = Processor.process_startStreamSession
    self._processMap["stopStreamSession"] = Processor.process_stopStreamSession
    self._processMap["setSessionAccessControl"] = Processor.process_setSessionAccessControl
    self._processMap["getStreamList"] = Processor.process_getStreamList
    self._processMap["getStreamClients"] = Processor.process_getStreamClients

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getServerID(self, seqid, iprot, oprot):
    args = getServerID_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getServerID_result()
    result.success = self._handler.getServerID()
    oprot.writeMessageBegin("getServerID", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDevices(self, seqid, iprot, oprot):
    args = getDevices_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDevices_result()
    result.success = self._handler.getDevices()
    oprot.writeMessageBegin("getDevices", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRecordingDevices(self, seqid, iprot, oprot):
    args = getRecordingDevices_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRecordingDevices_result()
    result.success = self._handler.getRecordingDevices()
    oprot.writeMessageBegin("getRecordingDevices", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setGlobalConfiguration(self, seqid, iprot, oprot):
    args = setGlobalConfiguration_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setGlobalConfiguration_result()
    result.success = self._handler.setGlobalConfiguration(args.configurations)
    oprot.writeMessageBegin("setGlobalConfiguration", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setDeviceConfiguration(self, seqid, iprot, oprot):
    args = setDeviceConfiguration_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setDeviceConfiguration_result()
    result.success = self._handler.setDeviceConfiguration(args.deviceId, args.channelIndex, args.configurations)
    oprot.writeMessageBegin("setDeviceConfiguration", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_startRecordingTask(self, seqid, iprot, oprot):
    args = startRecordingTask_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = startRecordingTask_result()
    result.success = self._handler.startRecordingTask(args.deviceId, args.taskType, args.taskInfo)
    oprot.writeMessageBegin("startRecordingTask", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopRecordingTask(self, seqid, iprot, oprot):
    args = stopRecordingTask_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopRecordingTask_result()
    result.success = self._handler.stopRecordingTask(args.deviceId)
    oprot.writeMessageBegin("stopRecordingTask", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getEventVideo(self, seqid, iprot, oprot):
    args = getEventVideo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getEventVideo_result()
    result.success = self._handler.getEventVideo(args.deviceId, args.channelIndex, args.eventInfo)
    oprot.writeMessageBegin("getEventVideo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_startStreamSession(self, seqid, iprot, oprot):
    args = startStreamSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = startStreamSession_result()
    result.success = self._handler.startStreamSession(args.sessionId, args.deviceId, args.channelIndex, args.streamInfo)
    oprot.writeMessageBegin("startStreamSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopStreamSession(self, seqid, iprot, oprot):
    args = stopStreamSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopStreamSession_result()
    result.success = self._handler.stopStreamSession(args.sessionId)
    oprot.writeMessageBegin("stopStreamSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setSessionAccessControl(self, seqid, iprot, oprot):
    args = setSessionAccessControl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setSessionAccessControl_result()
    result.success = self._handler.setSessionAccessControl(args.sessionId, args.ttl, args.allowedClientIpAddresses)
    oprot.writeMessageBegin("setSessionAccessControl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getStreamList(self, seqid, iprot, oprot):
    args = getStreamList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getStreamList_result()
    result.success = self._handler.getStreamList(args.deviceId, args.channelIndex, args.streamInfo)
    oprot.writeMessageBegin("getStreamList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getStreamClients(self, seqid, iprot, oprot):
    args = getStreamClients_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getStreamClients_result()
    result.success = self._handler.getStreamClients(args.deviceId, args.channelIndex, args.streamInfo)
    oprot.writeMessageBegin("getStreamClients", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getServerID_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerID_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getServerID_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerID_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDevices_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDevices_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDevices_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDevices_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter6 in self.success:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRecordingDevices_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRecordingDevices_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRecordingDevices_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRecordingDevices_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter13 in self.success:
        oprot.writeI64(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGlobalConfiguration_args:
  """
  Attributes:
   - configurations
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'configurations', None, None, ), # 1
  )

  def __init__(self, configurations=None,):
    self.configurations = configurations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.configurations = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGlobalConfiguration_args')
    if self.configurations is not None:
      oprot.writeFieldBegin('configurations', TType.STRING, 1)
      oprot.writeString(self.configurations)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGlobalConfiguration_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGlobalConfiguration_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setDeviceConfiguration_args:
  """
  Attributes:
   - deviceId
   - channelIndex
   - configurations
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channelIndex', None, None, ), # 2
    (3, TType.STRING, 'configurations', None, None, ), # 3
  )

  def __init__(self, deviceId=None, channelIndex=None, configurations=None,):
    self.deviceId = deviceId
    self.channelIndex = channelIndex
    self.configurations = configurations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channelIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.configurations = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setDeviceConfiguration_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channelIndex is not None:
      oprot.writeFieldBegin('channelIndex', TType.I32, 2)
      oprot.writeI32(self.channelIndex)
      oprot.writeFieldEnd()
    if self.configurations is not None:
      oprot.writeFieldBegin('configurations', TType.STRING, 3)
      oprot.writeString(self.configurations)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setDeviceConfiguration_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setDeviceConfiguration_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startRecordingTask_args:
  """
  Attributes:
   - deviceId
   - taskType
   - taskInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.STRING, 'taskType', None, None, ), # 2
    (3, TType.STRING, 'taskInfo', None, None, ), # 3
  )

  def __init__(self, deviceId=None, taskType=None, taskInfo=None,):
    self.deviceId = deviceId
    self.taskType = taskType
    self.taskInfo = taskInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.taskType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startRecordingTask_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.taskType is not None:
      oprot.writeFieldBegin('taskType', TType.STRING, 2)
      oprot.writeString(self.taskType)
      oprot.writeFieldEnd()
    if self.taskInfo is not None:
      oprot.writeFieldBegin('taskInfo', TType.STRING, 3)
      oprot.writeString(self.taskInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startRecordingTask_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startRecordingTask_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopRecordingTask_args:
  """
  Attributes:
   - deviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
  )

  def __init__(self, deviceId=None,):
    self.deviceId = deviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopRecordingTask_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopRecordingTask_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopRecordingTask_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getEventVideo_args:
  """
  Attributes:
   - deviceId
   - channelIndex
   - eventInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channelIndex', None, None, ), # 2
    (3, TType.STRING, 'eventInfo', None, None, ), # 3
  )

  def __init__(self, deviceId=None, channelIndex=None, eventInfo=None,):
    self.deviceId = deviceId
    self.channelIndex = channelIndex
    self.eventInfo = eventInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channelIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.eventInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getEventVideo_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channelIndex is not None:
      oprot.writeFieldBegin('channelIndex', TType.I32, 2)
      oprot.writeI32(self.channelIndex)
      oprot.writeFieldEnd()
    if self.eventInfo is not None:
      oprot.writeFieldBegin('eventInfo', TType.STRING, 3)
      oprot.writeString(self.eventInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getEventVideo_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getEventVideo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startStreamSession_args:
  """
  Attributes:
   - sessionId
   - deviceId
   - channelIndex
   - streamInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.I64, 'deviceId', None, None, ), # 2
    (3, TType.I32, 'channelIndex', None, None, ), # 3
    (4, TType.STRING, 'streamInfo', None, None, ), # 4
  )

  def __init__(self, sessionId=None, deviceId=None, channelIndex=None, streamInfo=None,):
    self.sessionId = sessionId
    self.deviceId = deviceId
    self.channelIndex = channelIndex
    self.streamInfo = streamInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.channelIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.streamInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startStreamSession_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 2)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channelIndex is not None:
      oprot.writeFieldBegin('channelIndex', TType.I32, 3)
      oprot.writeI32(self.channelIndex)
      oprot.writeFieldEnd()
    if self.streamInfo is not None:
      oprot.writeFieldBegin('streamInfo', TType.STRING, 4)
      oprot.writeString(self.streamInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startStreamSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startStreamSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter20 in self.success:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopStreamSession_args:
  """
  Attributes:
   - sessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
  )

  def __init__(self, sessionId=None,):
    self.sessionId = sessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopStreamSession_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopStreamSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopStreamSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSessionAccessControl_args:
  """
  Attributes:
   - sessionId
   - ttl
   - allowedClientIpAddresses
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.I64, 'ttl', None, None, ), # 2
    (3, TType.LIST, 'allowedClientIpAddresses', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, sessionId=None, ttl=None, allowedClientIpAddresses=None,):
    self.sessionId = sessionId
    self.ttl = ttl
    self.allowedClientIpAddresses = allowedClientIpAddresses

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ttl = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.allowedClientIpAddresses = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.allowedClientIpAddresses.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSessionAccessControl_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.ttl is not None:
      oprot.writeFieldBegin('ttl', TType.I64, 2)
      oprot.writeI64(self.ttl)
      oprot.writeFieldEnd()
    if self.allowedClientIpAddresses is not None:
      oprot.writeFieldBegin('allowedClientIpAddresses', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.allowedClientIpAddresses))
      for iter27 in self.allowedClientIpAddresses:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSessionAccessControl_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSessionAccessControl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamList_args:
  """
  Attributes:
   - deviceId
   - channelIndex
   - streamInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channelIndex', None, None, ), # 2
    (3, TType.STRING, 'streamInfo', None, None, ), # 3
  )

  def __init__(self, deviceId=None, channelIndex=None, streamInfo=None,):
    self.deviceId = deviceId
    self.channelIndex = channelIndex
    self.streamInfo = streamInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channelIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.streamInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamList_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channelIndex is not None:
      oprot.writeFieldBegin('channelIndex', TType.I32, 2)
      oprot.writeI32(self.channelIndex)
      oprot.writeFieldEnd()
    if self.streamInfo is not None:
      oprot.writeFieldBegin('streamInfo', TType.STRING, 3)
      oprot.writeString(self.streamInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamList_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString();
            self.success.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamList_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter34 in self.success:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamClients_args:
  """
  Attributes:
   - deviceId
   - channelIndex
   - streamInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channelIndex', None, None, ), # 2
    (3, TType.STRING, 'streamInfo', None, None, ), # 3
  )

  def __init__(self, deviceId=None, channelIndex=None, streamInfo=None,):
    self.deviceId = deviceId
    self.channelIndex = channelIndex
    self.streamInfo = streamInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channelIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.streamInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamClients_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channelIndex is not None:
      oprot.writeFieldBegin('channelIndex', TType.I32, 2)
      oprot.writeI32(self.channelIndex)
      oprot.writeFieldEnd()
    if self.streamInfo is not None:
      oprot.writeFieldBegin('streamInfo', TType.STRING, 3)
      oprot.writeString(self.streamInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamClients_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readString();
            self.success.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamClients_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter41 in self.success:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
