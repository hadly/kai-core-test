#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  NodeService - this service provides API for KAI Nodes to push information to Platform Cloud Server.
  """
  def addCamera(self, nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels):
    """
    Add camera.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) cameraName - Name of the camera
    (3) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (4) nodeCoreDeviceId - ID of the camera (core side deviceID on the Node)
    (5) channels - Number of channels that this camera supports

    Parameters:
     - nodeId
     - cameraName
     - nodePlatformDeviceId
     - nodeCoreDeviceId
     - channels
    """
    pass

  def updateCamera(self, nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels):
    """
    Update camera.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) cameraName - Name of the camera
    (3) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (4) nodeCoreDeviceId - ID of the camera (core side deviceID on the Node)
    (5) channels - Number of channels that this camera supports

    Parameters:
     - nodeId
     - cameraName
     - nodePlatformDeviceId
     - nodeCoreDeviceId
     - channels
    """
    pass

  def removeCamera(self, nodeId, nodePlatformDeviceId):
    """
    Remove camera.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) cameraId - ID of the camera (platform side deviceID on the Node)

    Parameters:
     - nodeId
     - nodePlatformDeviceId
    """
    pass

  def startVca(self, nodeId, nodePlatformDeviceId, channelNo, vcaType):
    """
    Started a VCA on Node.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (3) channelNo - The channel number of camera on which VCA is started.
    (4) vcaType - Type of the VCA that is started.

    Parameters:
     - nodeId
     - nodePlatformDeviceId
     - channelNo
     - vcaType
    """
    pass

  def stopVca(self, nodeId, nodePlatformDeviceId, channelNo, vcaType):
    """
    Stopped a VCA on Node.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (3) channelNo - The channel number of camera on which VCA is started.
    (4) vcaType - Type of the VCA that is started.

    Parameters:
     - nodeId
     - nodePlatformDeviceId
     - channelNo
     - vcaType
    """
    pass


class Client(Iface):
  """
  NodeService - this service provides API for KAI Nodes to push information to Platform Cloud Server.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def addCamera(self, nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels):
    """
    Add camera.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) cameraName - Name of the camera
    (3) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (4) nodeCoreDeviceId - ID of the camera (core side deviceID on the Node)
    (5) channels - Number of channels that this camera supports

    Parameters:
     - nodeId
     - cameraName
     - nodePlatformDeviceId
     - nodeCoreDeviceId
     - channels
    """
    self.send_addCamera(nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels)
    return self.recv_addCamera()

  def send_addCamera(self, nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels):
    self._oprot.writeMessageBegin('addCamera', TMessageType.CALL, self._seqid)
    args = addCamera_args()
    args.nodeId = nodeId
    args.cameraName = cameraName
    args.nodePlatformDeviceId = nodePlatformDeviceId
    args.nodeCoreDeviceId = nodeCoreDeviceId
    args.channels = channels
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addCamera(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addCamera_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.platformExp is not None:
      raise result.platformExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addCamera failed: unknown result");

  def updateCamera(self, nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels):
    """
    Update camera.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) cameraName - Name of the camera
    (3) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (4) nodeCoreDeviceId - ID of the camera (core side deviceID on the Node)
    (5) channels - Number of channels that this camera supports

    Parameters:
     - nodeId
     - cameraName
     - nodePlatformDeviceId
     - nodeCoreDeviceId
     - channels
    """
    self.send_updateCamera(nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels)
    return self.recv_updateCamera()

  def send_updateCamera(self, nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels):
    self._oprot.writeMessageBegin('updateCamera', TMessageType.CALL, self._seqid)
    args = updateCamera_args()
    args.nodeId = nodeId
    args.cameraName = cameraName
    args.nodePlatformDeviceId = nodePlatformDeviceId
    args.nodeCoreDeviceId = nodeCoreDeviceId
    args.channels = channels
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateCamera(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateCamera_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.platformExp is not None:
      raise result.platformExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateCamera failed: unknown result");

  def removeCamera(self, nodeId, nodePlatformDeviceId):
    """
    Remove camera.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) cameraId - ID of the camera (platform side deviceID on the Node)

    Parameters:
     - nodeId
     - nodePlatformDeviceId
    """
    self.send_removeCamera(nodeId, nodePlatformDeviceId)
    return self.recv_removeCamera()

  def send_removeCamera(self, nodeId, nodePlatformDeviceId):
    self._oprot.writeMessageBegin('removeCamera', TMessageType.CALL, self._seqid)
    args = removeCamera_args()
    args.nodeId = nodeId
    args.nodePlatformDeviceId = nodePlatformDeviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeCamera(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeCamera_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.platformExp is not None:
      raise result.platformExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeCamera failed: unknown result");

  def startVca(self, nodeId, nodePlatformDeviceId, channelNo, vcaType):
    """
    Started a VCA on Node.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (3) channelNo - The channel number of camera on which VCA is started.
    (4) vcaType - Type of the VCA that is started.

    Parameters:
     - nodeId
     - nodePlatformDeviceId
     - channelNo
     - vcaType
    """
    self.send_startVca(nodeId, nodePlatformDeviceId, channelNo, vcaType)
    return self.recv_startVca()

  def send_startVca(self, nodeId, nodePlatformDeviceId, channelNo, vcaType):
    self._oprot.writeMessageBegin('startVca', TMessageType.CALL, self._seqid)
    args = startVca_args()
    args.nodeId = nodeId
    args.nodePlatformDeviceId = nodePlatformDeviceId
    args.channelNo = channelNo
    args.vcaType = vcaType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_startVca(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = startVca_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.platformExp is not None:
      raise result.platformExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "startVca failed: unknown result");

  def stopVca(self, nodeId, nodePlatformDeviceId, channelNo, vcaType):
    """
    Stopped a VCA on Node.

    (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
    (2) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
    (3) channelNo - The channel number of camera on which VCA is started.
    (4) vcaType - Type of the VCA that is started.

    Parameters:
     - nodeId
     - nodePlatformDeviceId
     - channelNo
     - vcaType
    """
    self.send_stopVca(nodeId, nodePlatformDeviceId, channelNo, vcaType)
    return self.recv_stopVca()

  def send_stopVca(self, nodeId, nodePlatformDeviceId, channelNo, vcaType):
    self._oprot.writeMessageBegin('stopVca', TMessageType.CALL, self._seqid)
    args = stopVca_args()
    args.nodeId = nodeId
    args.nodePlatformDeviceId = nodePlatformDeviceId
    args.channelNo = channelNo
    args.vcaType = vcaType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stopVca(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stopVca_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.platformExp is not None:
      raise result.platformExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stopVca failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["addCamera"] = Processor.process_addCamera
    self._processMap["updateCamera"] = Processor.process_updateCamera
    self._processMap["removeCamera"] = Processor.process_removeCamera
    self._processMap["startVca"] = Processor.process_startVca
    self._processMap["stopVca"] = Processor.process_stopVca

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_addCamera(self, seqid, iprot, oprot):
    args = addCamera_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addCamera_result()
    try:
      result.success = self._handler.addCamera(args.nodeId, args.cameraName, args.nodePlatformDeviceId, args.nodeCoreDeviceId, args.channels)
    except PlatformException, platformExp:
      result.platformExp = platformExp
    oprot.writeMessageBegin("addCamera", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateCamera(self, seqid, iprot, oprot):
    args = updateCamera_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateCamera_result()
    try:
      result.success = self._handler.updateCamera(args.nodeId, args.cameraName, args.nodePlatformDeviceId, args.nodeCoreDeviceId, args.channels)
    except PlatformException, platformExp:
      result.platformExp = platformExp
    oprot.writeMessageBegin("updateCamera", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeCamera(self, seqid, iprot, oprot):
    args = removeCamera_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeCamera_result()
    try:
      result.success = self._handler.removeCamera(args.nodeId, args.nodePlatformDeviceId)
    except PlatformException, platformExp:
      result.platformExp = platformExp
    oprot.writeMessageBegin("removeCamera", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_startVca(self, seqid, iprot, oprot):
    args = startVca_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = startVca_result()
    try:
      result.success = self._handler.startVca(args.nodeId, args.nodePlatformDeviceId, args.channelNo, args.vcaType)
    except PlatformException, platformExp:
      result.platformExp = platformExp
    oprot.writeMessageBegin("startVca", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopVca(self, seqid, iprot, oprot):
    args = stopVca_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopVca_result()
    try:
      result.success = self._handler.stopVca(args.nodeId, args.nodePlatformDeviceId, args.channelNo, args.vcaType)
    except PlatformException, platformExp:
      result.platformExp = platformExp
    oprot.writeMessageBegin("stopVca", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class addCamera_args:
  """
  Attributes:
   - nodeId
   - cameraName
   - nodePlatformDeviceId
   - nodeCoreDeviceId
   - channels
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'cameraName', None, None, ), # 2
    (3, TType.STRING, 'nodePlatformDeviceId', None, None, ), # 3
    (4, TType.STRING, 'nodeCoreDeviceId', None, None, ), # 4
    (5, TType.I32, 'channels', None, None, ), # 5
  )

  def __init__(self, nodeId=None, cameraName=None, nodePlatformDeviceId=None, nodeCoreDeviceId=None, channels=None,):
    self.nodeId = nodeId
    self.cameraName = cameraName
    self.nodePlatformDeviceId = nodePlatformDeviceId
    self.nodeCoreDeviceId = nodeCoreDeviceId
    self.channels = channels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cameraName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nodePlatformDeviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nodeCoreDeviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.channels = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addCamera_args')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.STRING, 1)
      oprot.writeString(self.nodeId)
      oprot.writeFieldEnd()
    if self.cameraName is not None:
      oprot.writeFieldBegin('cameraName', TType.STRING, 2)
      oprot.writeString(self.cameraName)
      oprot.writeFieldEnd()
    if self.nodePlatformDeviceId is not None:
      oprot.writeFieldBegin('nodePlatformDeviceId', TType.STRING, 3)
      oprot.writeString(self.nodePlatformDeviceId)
      oprot.writeFieldEnd()
    if self.nodeCoreDeviceId is not None:
      oprot.writeFieldBegin('nodeCoreDeviceId', TType.STRING, 4)
      oprot.writeString(self.nodeCoreDeviceId)
      oprot.writeFieldEnd()
    if self.channels is not None:
      oprot.writeFieldBegin('channels', TType.I32, 5)
      oprot.writeI32(self.channels)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addCamera_result:
  """
  Attributes:
   - success
   - platformExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'platformExp', (PlatformException, PlatformException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, platformExp=None,):
    self.success = success
    self.platformExp = platformExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.platformExp = PlatformException()
          self.platformExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addCamera_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.platformExp is not None:
      oprot.writeFieldBegin('platformExp', TType.STRUCT, 1)
      self.platformExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateCamera_args:
  """
  Attributes:
   - nodeId
   - cameraName
   - nodePlatformDeviceId
   - nodeCoreDeviceId
   - channels
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'cameraName', None, None, ), # 2
    (3, TType.STRING, 'nodePlatformDeviceId', None, None, ), # 3
    (4, TType.STRING, 'nodeCoreDeviceId', None, None, ), # 4
    (5, TType.I32, 'channels', None, None, ), # 5
  )

  def __init__(self, nodeId=None, cameraName=None, nodePlatformDeviceId=None, nodeCoreDeviceId=None, channels=None,):
    self.nodeId = nodeId
    self.cameraName = cameraName
    self.nodePlatformDeviceId = nodePlatformDeviceId
    self.nodeCoreDeviceId = nodeCoreDeviceId
    self.channels = channels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cameraName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nodePlatformDeviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nodeCoreDeviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.channels = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateCamera_args')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.STRING, 1)
      oprot.writeString(self.nodeId)
      oprot.writeFieldEnd()
    if self.cameraName is not None:
      oprot.writeFieldBegin('cameraName', TType.STRING, 2)
      oprot.writeString(self.cameraName)
      oprot.writeFieldEnd()
    if self.nodePlatformDeviceId is not None:
      oprot.writeFieldBegin('nodePlatformDeviceId', TType.STRING, 3)
      oprot.writeString(self.nodePlatformDeviceId)
      oprot.writeFieldEnd()
    if self.nodeCoreDeviceId is not None:
      oprot.writeFieldBegin('nodeCoreDeviceId', TType.STRING, 4)
      oprot.writeString(self.nodeCoreDeviceId)
      oprot.writeFieldEnd()
    if self.channels is not None:
      oprot.writeFieldBegin('channels', TType.I32, 5)
      oprot.writeI32(self.channels)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateCamera_result:
  """
  Attributes:
   - success
   - platformExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'platformExp', (PlatformException, PlatformException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, platformExp=None,):
    self.success = success
    self.platformExp = platformExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.platformExp = PlatformException()
          self.platformExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateCamera_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.platformExp is not None:
      oprot.writeFieldBegin('platformExp', TType.STRUCT, 1)
      self.platformExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeCamera_args:
  """
  Attributes:
   - nodeId
   - nodePlatformDeviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'nodePlatformDeviceId', None, None, ), # 2
  )

  def __init__(self, nodeId=None, nodePlatformDeviceId=None,):
    self.nodeId = nodeId
    self.nodePlatformDeviceId = nodePlatformDeviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nodePlatformDeviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeCamera_args')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.STRING, 1)
      oprot.writeString(self.nodeId)
      oprot.writeFieldEnd()
    if self.nodePlatformDeviceId is not None:
      oprot.writeFieldBegin('nodePlatformDeviceId', TType.STRING, 2)
      oprot.writeString(self.nodePlatformDeviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeCamera_result:
  """
  Attributes:
   - success
   - platformExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'platformExp', (PlatformException, PlatformException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, platformExp=None,):
    self.success = success
    self.platformExp = platformExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.platformExp = PlatformException()
          self.platformExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeCamera_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.platformExp is not None:
      oprot.writeFieldBegin('platformExp', TType.STRUCT, 1)
      self.platformExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startVca_args:
  """
  Attributes:
   - nodeId
   - nodePlatformDeviceId
   - channelNo
   - vcaType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'nodePlatformDeviceId', None, None, ), # 2
    (3, TType.I32, 'channelNo', None, None, ), # 3
    (4, TType.STRING, 'vcaType', None, None, ), # 4
  )

  def __init__(self, nodeId=None, nodePlatformDeviceId=None, channelNo=None, vcaType=None,):
    self.nodeId = nodeId
    self.nodePlatformDeviceId = nodePlatformDeviceId
    self.channelNo = channelNo
    self.vcaType = vcaType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nodePlatformDeviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.channelNo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.vcaType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startVca_args')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.STRING, 1)
      oprot.writeString(self.nodeId)
      oprot.writeFieldEnd()
    if self.nodePlatformDeviceId is not None:
      oprot.writeFieldBegin('nodePlatformDeviceId', TType.STRING, 2)
      oprot.writeString(self.nodePlatformDeviceId)
      oprot.writeFieldEnd()
    if self.channelNo is not None:
      oprot.writeFieldBegin('channelNo', TType.I32, 3)
      oprot.writeI32(self.channelNo)
      oprot.writeFieldEnd()
    if self.vcaType is not None:
      oprot.writeFieldBegin('vcaType', TType.STRING, 4)
      oprot.writeString(self.vcaType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startVca_result:
  """
  Attributes:
   - success
   - platformExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'platformExp', (PlatformException, PlatformException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, platformExp=None,):
    self.success = success
    self.platformExp = platformExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.platformExp = PlatformException()
          self.platformExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startVca_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.platformExp is not None:
      oprot.writeFieldBegin('platformExp', TType.STRUCT, 1)
      self.platformExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopVca_args:
  """
  Attributes:
   - nodeId
   - nodePlatformDeviceId
   - channelNo
   - vcaType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'nodeId', None, None, ), # 1
    (2, TType.STRING, 'nodePlatformDeviceId', None, None, ), # 2
    (3, TType.I32, 'channelNo', None, None, ), # 3
    (4, TType.STRING, 'vcaType', None, None, ), # 4
  )

  def __init__(self, nodeId=None, nodePlatformDeviceId=None, channelNo=None, vcaType=None,):
    self.nodeId = nodeId
    self.nodePlatformDeviceId = nodePlatformDeviceId
    self.channelNo = channelNo
    self.vcaType = vcaType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.nodeId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nodePlatformDeviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.channelNo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.vcaType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopVca_args')
    if self.nodeId is not None:
      oprot.writeFieldBegin('nodeId', TType.STRING, 1)
      oprot.writeString(self.nodeId)
      oprot.writeFieldEnd()
    if self.nodePlatformDeviceId is not None:
      oprot.writeFieldBegin('nodePlatformDeviceId', TType.STRING, 2)
      oprot.writeString(self.nodePlatformDeviceId)
      oprot.writeFieldEnd()
    if self.channelNo is not None:
      oprot.writeFieldBegin('channelNo', TType.I32, 3)
      oprot.writeI32(self.channelNo)
      oprot.writeFieldEnd()
    if self.vcaType is not None:
      oprot.writeFieldBegin('vcaType', TType.STRING, 4)
      oprot.writeString(self.vcaType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopVca_result:
  """
  Attributes:
   - success
   - platformExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'platformExp', (PlatformException, PlatformException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, platformExp=None,):
    self.success = success
    self.platformExp = platformExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.platformExp = PlatformException()
          self.platformExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopVca_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.platformExp is not None:
      oprot.writeFieldBegin('platformExp', TType.STRUCT, 1)
      self.platformExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
