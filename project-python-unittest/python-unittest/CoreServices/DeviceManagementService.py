#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  DeviceManagementService - this service provides API for management of devices
  """
  def addModel(self, model):
    """
    Add a new device model to the system. This function will be typically called
    from an administrative user interface. This happens when a new model of
    devices is about to be introduced.

    Model should be added to database and model ID should be assigned. This
    device is not yet "activated". When a user buys this device, they will log
    in to the system and activate this device.

    (1) model - The model object/structure with the modelId field empty. The
                 modelId is generated by Core Engine/RMS+.

    Returns the "model ID" generated by Core Engine/RMS+.

    Parameters:
     - model
    """
    pass

  def updateModel(self, model):
    """
    Update model.

    (1) model - The model object/structure with a valid modelId. The
                 corresponding model gets updated in database.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - model
    """
    pass

  def deleteModel(self, modelId):
    """
    Delete model.

    (1) modelId - ID of the model to be deleted.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - modelId
    """
    pass

  def listModels(self, ):
    """
    Get list of models.

    Returns a list of all models in the system.
    """
    pass

  def addDevice(self, device):
    """
    Add a new device to the system. This function will be typically called
    from an administrative user interface. This happens when a new batch of
    devices is about to be shipped out to market.

    Device should be added to database and device ID should be assigned. This
    device is not yet "activated". When a user buys this device, they will log
    in to the system and activate this device.

    If the 'key' field contains MAC address and modelId contains a valid model ID,
    rest of the fields can be empty and backend should accept this. In this situation
    the backend should set rest of the fields to their default values. The defaults
    could be different for different device models.

    (1) device - The device object/structure with the deviceId field empty. The
                 deviceId is generated by Core Engine/RMS+.

    Returns the "device ID" generated by Core Engine/RMS+.

    Parameters:
     - device
    """
    pass

  def updateDevice(self, device):
    """
    Update device.

    (1) device - The device object/structure with a valid deviceId. The
                 corresponding device gets updated in database.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - device
    """
    pass

  def deleteDevice(self, deviceId):
    """
    Delete device.

    (1) deviceId - ID of the device to be deleted.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - deviceId
    """
    pass

  def listDevices(self, filter):
    """
    Get list of devices.

    (1) filter - "all" for all devices, "pending" for devices which are
                 not yet activated, "active" for all active devices.

    Returns a list of devices in the system.

    Parameters:
     - filter
    """
    pass

  def getDevice(self, deviceId):
    """
    Get details of a device.

    (1) deviceId - ID of the device.

    Returns details of the specified device.

    Parameters:
     - deviceId
    """
    pass

  def activateDevice(self, device):
    """
    Activate device. This function will typically be called from user
    account interface.

    (1) device - The device to be activated.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - device
    """
    pass


class Client(Iface):
  """
  DeviceManagementService - this service provides API for management of devices
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def addModel(self, model):
    """
    Add a new device model to the system. This function will be typically called
    from an administrative user interface. This happens when a new model of
    devices is about to be introduced.

    Model should be added to database and model ID should be assigned. This
    device is not yet "activated". When a user buys this device, they will log
    in to the system and activate this device.

    (1) model - The model object/structure with the modelId field empty. The
                 modelId is generated by Core Engine/RMS+.

    Returns the "model ID" generated by Core Engine/RMS+.

    Parameters:
     - model
    """
    self.send_addModel(model)
    return self.recv_addModel()

  def send_addModel(self, model):
    self._oprot.writeMessageBegin('addModel', TMessageType.CALL, self._seqid)
    args = addModel_args()
    args.model = model
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addModel(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addModel_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addModel failed: unknown result");

  def updateModel(self, model):
    """
    Update model.

    (1) model - The model object/structure with a valid modelId. The
                 corresponding model gets updated in database.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - model
    """
    self.send_updateModel(model)
    return self.recv_updateModel()

  def send_updateModel(self, model):
    self._oprot.writeMessageBegin('updateModel', TMessageType.CALL, self._seqid)
    args = updateModel_args()
    args.model = model
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateModel(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateModel_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateModel failed: unknown result");

  def deleteModel(self, modelId):
    """
    Delete model.

    (1) modelId - ID of the model to be deleted.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - modelId
    """
    self.send_deleteModel(modelId)
    return self.recv_deleteModel()

  def send_deleteModel(self, modelId):
    self._oprot.writeMessageBegin('deleteModel', TMessageType.CALL, self._seqid)
    args = deleteModel_args()
    args.modelId = modelId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteModel(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteModel_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteModel failed: unknown result");

  def listModels(self, ):
    """
    Get list of models.

    Returns a list of all models in the system.
    """
    self.send_listModels()
    return self.recv_listModels()

  def send_listModels(self, ):
    self._oprot.writeMessageBegin('listModels', TMessageType.CALL, self._seqid)
    args = listModels_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listModels(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = listModels_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listModels failed: unknown result");

  def addDevice(self, device):
    """
    Add a new device to the system. This function will be typically called
    from an administrative user interface. This happens when a new batch of
    devices is about to be shipped out to market.

    Device should be added to database and device ID should be assigned. This
    device is not yet "activated". When a user buys this device, they will log
    in to the system and activate this device.

    If the 'key' field contains MAC address and modelId contains a valid model ID,
    rest of the fields can be empty and backend should accept this. In this situation
    the backend should set rest of the fields to their default values. The defaults
    could be different for different device models.

    (1) device - The device object/structure with the deviceId field empty. The
                 deviceId is generated by Core Engine/RMS+.

    Returns the "device ID" generated by Core Engine/RMS+.

    Parameters:
     - device
    """
    self.send_addDevice(device)
    return self.recv_addDevice()

  def send_addDevice(self, device):
    self._oprot.writeMessageBegin('addDevice', TMessageType.CALL, self._seqid)
    args = addDevice_args()
    args.device = device
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addDevice failed: unknown result");

  def updateDevice(self, device):
    """
    Update device.

    (1) device - The device object/structure with a valid deviceId. The
                 corresponding device gets updated in database.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - device
    """
    self.send_updateDevice(device)
    return self.recv_updateDevice()

  def send_updateDevice(self, device):
    self._oprot.writeMessageBegin('updateDevice', TMessageType.CALL, self._seqid)
    args = updateDevice_args()
    args.device = device
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateDevice failed: unknown result");

  def deleteDevice(self, deviceId):
    """
    Delete device.

    (1) deviceId - ID of the device to be deleted.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - deviceId
    """
    self.send_deleteDevice(deviceId)
    return self.recv_deleteDevice()

  def send_deleteDevice(self, deviceId):
    self._oprot.writeMessageBegin('deleteDevice', TMessageType.CALL, self._seqid)
    args = deleteDevice_args()
    args.deviceId = deviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteDevice failed: unknown result");

  def listDevices(self, filter):
    """
    Get list of devices.

    (1) filter - "all" for all devices, "pending" for devices which are
                 not yet activated, "active" for all active devices.

    Returns a list of devices in the system.

    Parameters:
     - filter
    """
    self.send_listDevices(filter)
    return self.recv_listDevices()

  def send_listDevices(self, filter):
    self._oprot.writeMessageBegin('listDevices', TMessageType.CALL, self._seqid)
    args = listDevices_args()
    args.filter = filter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_listDevices(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = listDevices_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "listDevices failed: unknown result");

  def getDevice(self, deviceId):
    """
    Get details of a device.

    (1) deviceId - ID of the device.

    Returns details of the specified device.

    Parameters:
     - deviceId
    """
    self.send_getDevice(deviceId)
    return self.recv_getDevice()

  def send_getDevice(self, deviceId):
    self._oprot.writeMessageBegin('getDevice', TMessageType.CALL, self._seqid)
    args = getDevice_args()
    args.deviceId = deviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDevice failed: unknown result");

  def activateDevice(self, device):
    """
    Activate device. This function will typically be called from user
    account interface.

    (1) device - The device to be activated.

    Returns TRUE on success, FALSE otherwise.

    Parameters:
     - device
    """
    self.send_activateDevice(device)
    return self.recv_activateDevice()

  def send_activateDevice(self, device):
    self._oprot.writeMessageBegin('activateDevice', TMessageType.CALL, self._seqid)
    args = activateDevice_args()
    args.device = device
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_activateDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = activateDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "activateDevice failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["addModel"] = Processor.process_addModel
    self._processMap["updateModel"] = Processor.process_updateModel
    self._processMap["deleteModel"] = Processor.process_deleteModel
    self._processMap["listModels"] = Processor.process_listModels
    self._processMap["addDevice"] = Processor.process_addDevice
    self._processMap["updateDevice"] = Processor.process_updateDevice
    self._processMap["deleteDevice"] = Processor.process_deleteDevice
    self._processMap["listDevices"] = Processor.process_listDevices
    self._processMap["getDevice"] = Processor.process_getDevice
    self._processMap["activateDevice"] = Processor.process_activateDevice

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_addModel(self, seqid, iprot, oprot):
    args = addModel_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addModel_result()
    try:
      result.success = self._handler.addModel(args.model)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("addModel", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateModel(self, seqid, iprot, oprot):
    args = updateModel_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateModel_result()
    try:
      result.success = self._handler.updateModel(args.model)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("updateModel", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteModel(self, seqid, iprot, oprot):
    args = deleteModel_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteModel_result()
    try:
      result.success = self._handler.deleteModel(args.modelId)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("deleteModel", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listModels(self, seqid, iprot, oprot):
    args = listModels_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listModels_result()
    try:
      result.success = self._handler.listModels()
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("listModels", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addDevice(self, seqid, iprot, oprot):
    args = addDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addDevice_result()
    try:
      result.success = self._handler.addDevice(args.device)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("addDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateDevice(self, seqid, iprot, oprot):
    args = updateDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateDevice_result()
    try:
      result.success = self._handler.updateDevice(args.device)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("updateDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteDevice(self, seqid, iprot, oprot):
    args = deleteDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteDevice_result()
    try:
      result.success = self._handler.deleteDevice(args.deviceId)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("deleteDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_listDevices(self, seqid, iprot, oprot):
    args = listDevices_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = listDevices_result()
    try:
      result.success = self._handler.listDevices(args.filter)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("listDevices", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDevice(self, seqid, iprot, oprot):
    args = getDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDevice_result()
    try:
      result.success = self._handler.getDevice(args.deviceId)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("getDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_activateDevice(self, seqid, iprot, oprot):
    args = activateDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = activateDevice_result()
    try:
      result.success = self._handler.activateDevice(args.device)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("activateDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class addModel_args:
  """
  Attributes:
   - model
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (DeviceModel, DeviceModel.thrift_spec), None, ), # 1
  )

  def __init__(self, model=None,):
    self.model = model

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = DeviceModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addModel_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addModel_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addModel_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateModel_args:
  """
  Attributes:
   - model
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (DeviceModel, DeviceModel.thrift_spec), None, ), # 1
  )

  def __init__(self, model=None,):
    self.model = model

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = DeviceModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateModel_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateModel_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateModel_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteModel_args:
  """
  Attributes:
   - modelId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'modelId', None, None, ), # 1
  )

  def __init__(self, modelId=None,):
    self.modelId = modelId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.modelId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteModel_args')
    if self.modelId is not None:
      oprot.writeFieldBegin('modelId', TType.STRING, 1)
      oprot.writeString(self.modelId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteModel_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteModel_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listModels_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listModels_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listModels_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(DeviceModel, DeviceModel.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = DeviceModel()
            _elem75.read(iprot)
            self.success.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listModels_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter76 in self.success:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addDevice_args:
  """
  Attributes:
   - device
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'device', (DeviceDetails, DeviceDetails.thrift_spec), None, ), # 1
  )

  def __init__(self, device=None,):
    self.device = device

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.device = DeviceDetails()
          self.device.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addDevice_args')
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRUCT, 1)
      self.device.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addDevice_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateDevice_args:
  """
  Attributes:
   - device
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'device', (DeviceDetails, DeviceDetails.thrift_spec), None, ), # 1
  )

  def __init__(self, device=None,):
    self.device = device

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.device = DeviceDetails()
          self.device.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateDevice_args')
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRUCT, 1)
      self.device.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateDevice_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteDevice_args:
  """
  Attributes:
   - deviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deviceId', None, None, ), # 1
  )

  def __init__(self, deviceId=None,):
    self.deviceId = deviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteDevice_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 1)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteDevice_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listDevices_args:
  """
  Attributes:
   - filter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'filter', None, None, ), # 1
  )

  def __init__(self, filter=None,):
    self.filter = filter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.filter = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listDevices_args')
    if self.filter is not None:
      oprot.writeFieldBegin('filter', TType.STRING, 1)
      oprot.writeString(self.filter)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class listDevices_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(DeviceDetails, DeviceDetails.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = DeviceDetails()
            _elem82.read(iprot)
            self.success.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('listDevices_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter83 in self.success:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDevice_args:
  """
  Attributes:
   - deviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deviceId', None, None, ), # 1
  )

  def __init__(self, deviceId=None,):
    self.deviceId = deviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDevice_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 1)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDevice_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DeviceDetails, DeviceDetails.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DeviceDetails()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class activateDevice_args:
  """
  Attributes:
   - device
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'device', (DeviceDetails, DeviceDetails.thrift_spec), None, ), # 1
  )

  def __init__(self, device=None,):
    self.device = device

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.device = DeviceDetails()
          self.device.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('activateDevice_args')
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRUCT, 1)
      self.device.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class activateDevice_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('activateDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
