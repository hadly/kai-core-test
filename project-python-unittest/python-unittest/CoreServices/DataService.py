#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  DataService - this service provides various data retrieval API.
  """
  def getGPSData(self, deviceId, startTimestamp, endTimestamp):
    """
    Retrieve GPS location data.

    (1) deviceId - ID of the device whose GPS data is requested
    (2) startTimestamp - start time, ddMMyyyyHHmmss
    (3) endTimeStamp - end time, ddMMyyyyHHmmss

    Note: Set start and end timestamps to "" or null to get last known location.

    Parameters:
     - deviceId
     - startTimestamp
     - endTimestamp
    """
    pass

  def getEvents(self, deviceId, startTimestamp, endTimestamp, type):
    """
    Retrieve events that occured for specified device within the
    given time frame.

    (1) deviceId - ID of the device whose GPS data is requested
    (2) startTimestamp - start time, ddMMyyyyHHmmss
    (3) endTimeStamp - end time, ddMMyyyyHHmmss
    (4) type - the type of events to be fetched


    Parameters:
     - deviceId
     - startTimestamp
     - endTimestamp
     - type
    """
    pass

  def getGSensorData(self, deviceId, startTimestamp, endTimestamp):
    """
    Retrieve GSensor data.

    (1) deviceId - ID of the device whose GSensor data is requested
    (2) startTimestamp - start time, ddMMyyyyHHmmss
    (3) endTimeStamp - end time, ddMMyyyyHHmmss

    Note: Set start and end timestamps to "" or null to get last known gsensor data.

    Parameters:
     - deviceId
     - startTimestamp
     - endTimestamp
    """
    pass


class Client(Iface):
  """
  DataService - this service provides various data retrieval API.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getGPSData(self, deviceId, startTimestamp, endTimestamp):
    """
    Retrieve GPS location data.

    (1) deviceId - ID of the device whose GPS data is requested
    (2) startTimestamp - start time, ddMMyyyyHHmmss
    (3) endTimeStamp - end time, ddMMyyyyHHmmss

    Note: Set start and end timestamps to "" or null to get last known location.

    Parameters:
     - deviceId
     - startTimestamp
     - endTimestamp
    """
    self.send_getGPSData(deviceId, startTimestamp, endTimestamp)
    return self.recv_getGPSData()

  def send_getGPSData(self, deviceId, startTimestamp, endTimestamp):
    self._oprot.writeMessageBegin('getGPSData', TMessageType.CALL, self._seqid)
    args = getGPSData_args()
    args.deviceId = deviceId
    args.startTimestamp = startTimestamp
    args.endTimestamp = endTimestamp
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGPSData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getGPSData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGPSData failed: unknown result");

  def getEvents(self, deviceId, startTimestamp, endTimestamp, type):
    """
    Retrieve events that occured for specified device within the
    given time frame.

    (1) deviceId - ID of the device whose GPS data is requested
    (2) startTimestamp - start time, ddMMyyyyHHmmss
    (3) endTimeStamp - end time, ddMMyyyyHHmmss
    (4) type - the type of events to be fetched


    Parameters:
     - deviceId
     - startTimestamp
     - endTimestamp
     - type
    """
    self.send_getEvents(deviceId, startTimestamp, endTimestamp, type)
    return self.recv_getEvents()

  def send_getEvents(self, deviceId, startTimestamp, endTimestamp, type):
    self._oprot.writeMessageBegin('getEvents', TMessageType.CALL, self._seqid)
    args = getEvents_args()
    args.deviceId = deviceId
    args.startTimestamp = startTimestamp
    args.endTimestamp = endTimestamp
    args.type = type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getEvents(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getEvents_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getEvents failed: unknown result");

  def getGSensorData(self, deviceId, startTimestamp, endTimestamp):
    """
    Retrieve GSensor data.

    (1) deviceId - ID of the device whose GSensor data is requested
    (2) startTimestamp - start time, ddMMyyyyHHmmss
    (3) endTimeStamp - end time, ddMMyyyyHHmmss

    Note: Set start and end timestamps to "" or null to get last known gsensor data.

    Parameters:
     - deviceId
     - startTimestamp
     - endTimestamp
    """
    self.send_getGSensorData(deviceId, startTimestamp, endTimestamp)
    return self.recv_getGSensorData()

  def send_getGSensorData(self, deviceId, startTimestamp, endTimestamp):
    self._oprot.writeMessageBegin('getGSensorData', TMessageType.CALL, self._seqid)
    args = getGSensorData_args()
    args.deviceId = deviceId
    args.startTimestamp = startTimestamp
    args.endTimestamp = endTimestamp
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGSensorData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getGSensorData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.coreExp is not None:
      raise result.coreExp
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGSensorData failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getGPSData"] = Processor.process_getGPSData
    self._processMap["getEvents"] = Processor.process_getEvents
    self._processMap["getGSensorData"] = Processor.process_getGSensorData

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getGPSData(self, seqid, iprot, oprot):
    args = getGPSData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGPSData_result()
    try:
      result.success = self._handler.getGPSData(args.deviceId, args.startTimestamp, args.endTimestamp)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("getGPSData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getEvents(self, seqid, iprot, oprot):
    args = getEvents_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getEvents_result()
    try:
      result.success = self._handler.getEvents(args.deviceId, args.startTimestamp, args.endTimestamp, args.type)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("getEvents", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getGSensorData(self, seqid, iprot, oprot):
    args = getGSensorData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGSensorData_result()
    try:
      result.success = self._handler.getGSensorData(args.deviceId, args.startTimestamp, args.endTimestamp)
    except CoreException, coreExp:
      result.coreExp = coreExp
    oprot.writeMessageBegin("getGSensorData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getGPSData_args:
  """
  Attributes:
   - deviceId
   - startTimestamp
   - endTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deviceId', None, None, ), # 1
    (2, TType.STRING, 'startTimestamp', None, None, ), # 2
    (3, TType.STRING, 'endTimestamp', None, None, ), # 3
  )

  def __init__(self, deviceId=None, startTimestamp=None, endTimestamp=None,):
    self.deviceId = deviceId
    self.startTimestamp = startTimestamp
    self.endTimestamp = endTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.startTimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.endTimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGPSData_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 1)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    if self.startTimestamp is not None:
      oprot.writeFieldBegin('startTimestamp', TType.STRING, 2)
      oprot.writeString(self.startTimestamp)
      oprot.writeFieldEnd()
    if self.endTimestamp is not None:
      oprot.writeFieldBegin('endTimestamp', TType.STRING, 3)
      oprot.writeString(self.endTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGPSData_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(LocationDataPoint, LocationDataPoint.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = LocationDataPoint()
            _elem54.read(iprot)
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGPSData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter55 in self.success:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getEvents_args:
  """
  Attributes:
   - deviceId
   - startTimestamp
   - endTimestamp
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deviceId', None, None, ), # 1
    (2, TType.STRING, 'startTimestamp', None, None, ), # 2
    (3, TType.STRING, 'endTimestamp', None, None, ), # 3
    (4, TType.STRING, 'type', None, None, ), # 4
  )

  def __init__(self, deviceId=None, startTimestamp=None, endTimestamp=None, type=None,):
    self.deviceId = deviceId
    self.startTimestamp = startTimestamp
    self.endTimestamp = endTimestamp
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.startTimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.endTimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getEvents_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 1)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    if self.startTimestamp is not None:
      oprot.writeFieldBegin('startTimestamp', TType.STRING, 2)
      oprot.writeString(self.startTimestamp)
      oprot.writeFieldEnd()
    if self.endTimestamp is not None:
      oprot.writeFieldBegin('endTimestamp', TType.STRING, 3)
      oprot.writeString(self.endTimestamp)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 4)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getEvents_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(EventStructures.ttypes.EventDetails, EventStructures.ttypes.EventDetails.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = EventStructures.ttypes.EventDetails()
            _elem61.read(iprot)
            self.success.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getEvents_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter62 in self.success:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGSensorData_args:
  """
  Attributes:
   - deviceId
   - startTimestamp
   - endTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deviceId', None, None, ), # 1
    (2, TType.STRING, 'startTimestamp', None, None, ), # 2
    (3, TType.STRING, 'endTimestamp', None, None, ), # 3
  )

  def __init__(self, deviceId=None, startTimestamp=None, endTimestamp=None,):
    self.deviceId = deviceId
    self.startTimestamp = startTimestamp
    self.endTimestamp = endTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.startTimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.endTimestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGSensorData_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 1)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    if self.startTimestamp is not None:
      oprot.writeFieldBegin('startTimestamp', TType.STRING, 2)
      oprot.writeString(self.startTimestamp)
      oprot.writeFieldEnd()
    if self.endTimestamp is not None:
      oprot.writeFieldBegin('endTimestamp', TType.STRING, 3)
      oprot.writeString(self.endTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGSensorData_result:
  """
  Attributes:
   - success
   - coreExp
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(GSensorDataPoint, GSensorDataPoint.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'coreExp', (CoreException, CoreException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, coreExp=None,):
    self.success = success
    self.coreExp = coreExp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = GSensorDataPoint()
            _elem68.read(iprot)
            self.success.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.coreExp = CoreException()
          self.coreExp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGSensorData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter69 in self.success:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.coreExp is not None:
      oprot.writeFieldBegin('coreExp', TType.STRUCT, 1)
      self.coreExp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
