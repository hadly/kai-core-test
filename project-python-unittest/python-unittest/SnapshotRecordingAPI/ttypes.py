#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Entry:
  """
  An image entry.
  (1) deviceId - Device ID.
  (2) channel - Channel.
  (3) type - Type of snapshot.
  (4) time - Time of snapshot.
  (5) extension - File extension.

  Attributes:
   - deviceId
   - channel
   - type
   - time
   - extension
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channel', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.I64, 'time', None, None, ), # 4
    (5, TType.STRING, 'extension', None, None, ), # 5
  )

  def __init__(self, deviceId=None, channel=None, type=None, time=None, extension=None,):
    self.deviceId = deviceId
    self.channel = channel
    self.type = type
    self.time = time
    self.extension = extension

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.extension = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Entry')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 2)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 4)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.extension is not None:
      oprot.writeFieldBegin('extension', TType.STRING, 5)
      oprot.writeString(self.extension)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.deviceId is None:
      raise TProtocol.TProtocolException(message='Required field deviceId is unset!')
    if self.channel is None:
      raise TProtocol.TProtocolException(message='Required field channel is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.time is None:
      raise TProtocol.TProtocolException(message='Required field time is unset!')
    if self.extension is None:
      raise TProtocol.TProtocolException(message='Required field extension is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Search:
  """
  A search.
  (1) deviceId - Device ID.
  (2) channel - Channel.
  (3) type - Type of snapshot.
  (4) startTime - Earliest time of snapshot to search for.
  (5) endTime - Latest time of snapshot to search for.
  (6) extension - File extension.
  (7) firstToLast - Whether to search from first to last, or last to first.
  (8) numSnapshots - Maximum number of snapshots to search for.

  Attributes:
   - deviceId
   - channel
   - type
   - startTime
   - endTime
   - extension
   - firstToLast
   - numSnapshots
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channel', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.I64, 'startTime', None, None, ), # 4
    (5, TType.I64, 'endTime', None, None, ), # 5
    (6, TType.STRING, 'extension', None, None, ), # 6
    (7, TType.BOOL, 'firstToLast', None, None, ), # 7
    (8, TType.I32, 'numSnapshots', None, None, ), # 8
  )

  def __init__(self, deviceId=None, channel=None, type=None, startTime=None, endTime=None, extension=None, firstToLast=None, numSnapshots=None,):
    self.deviceId = deviceId
    self.channel = channel
    self.type = type
    self.startTime = startTime
    self.endTime = endTime
    self.extension = extension
    self.firstToLast = firstToLast
    self.numSnapshots = numSnapshots

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.extension = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.firstToLast = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.numSnapshots = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Search')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 2)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 4)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 5)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.extension is not None:
      oprot.writeFieldBegin('extension', TType.STRING, 6)
      oprot.writeString(self.extension)
      oprot.writeFieldEnd()
    if self.firstToLast is not None:
      oprot.writeFieldBegin('firstToLast', TType.BOOL, 7)
      oprot.writeBool(self.firstToLast)
      oprot.writeFieldEnd()
    if self.numSnapshots is not None:
      oprot.writeFieldBegin('numSnapshots', TType.I32, 8)
      oprot.writeI32(self.numSnapshots)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
