#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  NodeControlService - this service provides interface for
  management (control) of node. Cloud arbiter use this to exchange message
  with node arbiter.
  """
  def updateNodeStatus(self, macAddress, status):
    """
    Periodically called to update the status of a node.
    (1) macAddress - MAC address of node
    (2) status - node status

    Parameters:
     - macAddress
     - status
    """
    pass

  def sendHeartBeat(self, macAddress, confirmedCommands):
    """
       * Node arbiter send heart beat to cloud arbiter every second, return
       * the command information if there are operations need node to do.
       * (1) macAddress - MAC address of node
    * (2) confirmedCommands - A list of command information that node successfully executed

    Parameters:
     - macAddress
     - confirmedCommands
    """
    pass

  def sendNodeData(self, macAddress, dataType, stringData):
    """
       * Node arbiter send data to cloud arbiter
       * (1) macAddress - MAC address of node
    * (2) dataType - The type of data that will send
    * (3) stringData - Detailed information of the data(json format string)
    * RETURN true if the operation succeed, false if fail.

    Parameters:
     - macAddress
     - dataType
     - stringData
    """
    pass


class Client(Iface):
  """
  NodeControlService - this service provides interface for
  management (control) of node. Cloud arbiter use this to exchange message
  with node arbiter.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def updateNodeStatus(self, macAddress, status):
    """
    Periodically called to update the status of a node.
    (1) macAddress - MAC address of node
    (2) status - node status

    Parameters:
     - macAddress
     - status
    """
    self.send_updateNodeStatus(macAddress, status)
    return self.recv_updateNodeStatus()

  def send_updateNodeStatus(self, macAddress, status):
    self._oprot.writeMessageBegin('updateNodeStatus', TMessageType.CALL, self._seqid)
    args = updateNodeStatus_args()
    args.macAddress = macAddress
    args.status = status
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateNodeStatus(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateNodeStatus_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateNodeStatus failed: unknown result");

  def sendHeartBeat(self, macAddress, confirmedCommands):
    """
       * Node arbiter send heart beat to cloud arbiter every second, return
       * the command information if there are operations need node to do.
       * (1) macAddress - MAC address of node
    * (2) confirmedCommands - A list of command information that node successfully executed

    Parameters:
     - macAddress
     - confirmedCommands
    """
    self.send_sendHeartBeat(macAddress, confirmedCommands)
    return self.recv_sendHeartBeat()

  def send_sendHeartBeat(self, macAddress, confirmedCommands):
    self._oprot.writeMessageBegin('sendHeartBeat', TMessageType.CALL, self._seqid)
    args = sendHeartBeat_args()
    args.macAddress = macAddress
    args.confirmedCommands = confirmedCommands
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendHeartBeat(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendHeartBeat_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendHeartBeat failed: unknown result");

  def sendNodeData(self, macAddress, dataType, stringData):
    """
       * Node arbiter send data to cloud arbiter
       * (1) macAddress - MAC address of node
    * (2) dataType - The type of data that will send
    * (3) stringData - Detailed information of the data(json format string)
    * RETURN true if the operation succeed, false if fail.

    Parameters:
     - macAddress
     - dataType
     - stringData
    """
    self.send_sendNodeData(macAddress, dataType, stringData)
    return self.recv_sendNodeData()

  def send_sendNodeData(self, macAddress, dataType, stringData):
    self._oprot.writeMessageBegin('sendNodeData', TMessageType.CALL, self._seqid)
    args = sendNodeData_args()
    args.macAddress = macAddress
    args.dataType = dataType
    args.stringData = stringData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendNodeData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendNodeData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendNodeData failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["updateNodeStatus"] = Processor.process_updateNodeStatus
    self._processMap["sendHeartBeat"] = Processor.process_sendHeartBeat
    self._processMap["sendNodeData"] = Processor.process_sendNodeData

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_updateNodeStatus(self, seqid, iprot, oprot):
    args = updateNodeStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateNodeStatus_result()
    result.success = self._handler.updateNodeStatus(args.macAddress, args.status)
    oprot.writeMessageBegin("updateNodeStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendHeartBeat(self, seqid, iprot, oprot):
    args = sendHeartBeat_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendHeartBeat_result()
    result.success = self._handler.sendHeartBeat(args.macAddress, args.confirmedCommands)
    oprot.writeMessageBegin("sendHeartBeat", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendNodeData(self, seqid, iprot, oprot):
    args = sendNodeData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendNodeData_result()
    result.success = self._handler.sendNodeData(args.macAddress, args.dataType, args.stringData)
    oprot.writeMessageBegin("sendNodeData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class updateNodeStatus_args:
  """
  Attributes:
   - macAddress
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'macAddress', None, None, ), # 1
    (2, TType.STRUCT, 'status', (NodeStatus, NodeStatus.thrift_spec), None, ), # 2
  )

  def __init__(self, macAddress=None, status=None,):
    self.macAddress = macAddress
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.macAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.status = NodeStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateNodeStatus_args')
    if self.macAddress is not None:
      oprot.writeFieldBegin('macAddress', TType.STRING, 1)
      oprot.writeString(self.macAddress)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 2)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateNodeStatus_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateNodeStatus_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendHeartBeat_args:
  """
  Attributes:
   - macAddress
   - confirmedCommands
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'macAddress', None, None, ), # 1
    (2, TType.LIST, 'confirmedCommands', (TType.STRUCT,(CommandInfo, CommandInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, macAddress=None, confirmedCommands=None,):
    self.macAddress = macAddress
    self.confirmedCommands = confirmedCommands

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.macAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.confirmedCommands = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = CommandInfo()
            _elem12.read(iprot)
            self.confirmedCommands.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendHeartBeat_args')
    if self.macAddress is not None:
      oprot.writeFieldBegin('macAddress', TType.STRING, 1)
      oprot.writeString(self.macAddress)
      oprot.writeFieldEnd()
    if self.confirmedCommands is not None:
      oprot.writeFieldBegin('confirmedCommands', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.confirmedCommands))
      for iter13 in self.confirmedCommands:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendHeartBeat_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(CommandInfo, CommandInfo.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = CommandInfo()
            _elem19.read(iprot)
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendHeartBeat_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter20 in self.success:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendNodeData_args:
  """
  Attributes:
   - macAddress
   - dataType
   - stringData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'macAddress', None, None, ), # 1
    (2, TType.STRING, 'dataType', None, None, ), # 2
    (3, TType.STRING, 'stringData', None, None, ), # 3
  )

  def __init__(self, macAddress=None, dataType=None, stringData=None,):
    self.macAddress = macAddress
    self.dataType = dataType
    self.stringData = stringData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.macAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dataType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.stringData = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendNodeData_args')
    if self.macAddress is not None:
      oprot.writeFieldBegin('macAddress', TType.STRING, 1)
      oprot.writeString(self.macAddress)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.STRING, 2)
      oprot.writeString(self.dataType)
      oprot.writeFieldEnd()
    if self.stringData is not None:
      oprot.writeFieldBegin('stringData', TType.STRING, 3)
      oprot.writeString(self.stringData)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendNodeData_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendNodeData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
