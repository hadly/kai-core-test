#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Device data receiver interface.
  """
  def sendTaskData(self, serverId, deviceId, taskType, stringData, binaryData):
    """
    Sends data generated by a task to the Juzz4 system.
    (1) serverId - Server ID.
    (2) deviceId - Device ID.
    (3) taskType - Task type.
    (4) stringData - String data.
    (5) binaryData - Binary data.

    Parameters:
     - serverId
     - deviceId
     - taskType
     - stringData
     - binaryData
    """
    pass

  def sendEventData(self, serverId, deviceId, eventType, eventTime, description, stringData, binaryData):
    """
    Sends data generated by an event to the Juzz4 system.
    (1) serverId - Server ID.    null
    (2) deviceId - Device ID.    deviceid
    (3) eventType - Type of the event.    CAPTURE_EVENT_VIDEO
    (4) eventTime - Time of the event.    null
    (5) description - Description of the event.   null
    (6) stringData - String data.   json{"eventId":"95754ca2-4037-4747-ab38","deviceId":"..","channelId":"0"}
    (7) binaryData - Binary data.    null

    Parameters:
     - serverId
     - deviceId
     - eventType
     - eventTime
     - description
     - stringData
     - binaryData
    """
    pass


class Client(Iface):
  """
  Device data receiver interface.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def sendTaskData(self, serverId, deviceId, taskType, stringData, binaryData):
    """
    Sends data generated by a task to the Juzz4 system.
    (1) serverId - Server ID.
    (2) deviceId - Device ID.
    (3) taskType - Task type.
    (4) stringData - String data.
    (5) binaryData - Binary data.

    Parameters:
     - serverId
     - deviceId
     - taskType
     - stringData
     - binaryData
    """
    self.send_sendTaskData(serverId, deviceId, taskType, stringData, binaryData)
    return self.recv_sendTaskData()

  def send_sendTaskData(self, serverId, deviceId, taskType, stringData, binaryData):
    self._oprot.writeMessageBegin('sendTaskData', TMessageType.CALL, self._seqid)
    args = sendTaskData_args()
    args.serverId = serverId
    args.deviceId = deviceId
    args.taskType = taskType
    args.stringData = stringData
    args.binaryData = binaryData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendTaskData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendTaskData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendTaskData failed: unknown result");

  def sendEventData(self, serverId, deviceId, eventType, eventTime, description, stringData, binaryData):
    """
    Sends data generated by an event to the Juzz4 system.
    (1) serverId - Server ID.
    (2) deviceId - Device ID.
    (3) eventType - Type of the event.
    (4) eventTime - Time of the event.
    (5) description - Description of the event.
    (6) stringData - String data.
    (7) binaryData - Binary data.

    Parameters:
     - serverId
     - deviceId
     - eventType
     - eventTime
     - description
     - stringData
     - binaryData
    """
    self.send_sendEventData(serverId, deviceId, eventType, eventTime, description, stringData, binaryData)
    return self.recv_sendEventData()

  def send_sendEventData(self, serverId, deviceId, eventType, eventTime, description, stringData, binaryData):
    self._oprot.writeMessageBegin('sendEventData', TMessageType.CALL, self._seqid)
    args = sendEventData_args()
    args.serverId = serverId
    args.deviceId = deviceId
    args.eventType = eventType
    args.eventTime = eventTime
    args.description = description
    args.stringData = stringData
    args.binaryData = binaryData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendEventData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendEventData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendEventData failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["sendTaskData"] = Processor.process_sendTaskData
    self._processMap["sendEventData"] = Processor.process_sendEventData

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_sendTaskData(self, seqid, iprot, oprot):
    args = sendTaskData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendTaskData_result()
    result.success = self._handler.sendTaskData(args.serverId, args.deviceId, args.taskType, args.stringData, args.binaryData)
    oprot.writeMessageBegin("sendTaskData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendEventData(self, seqid, iprot, oprot):
    args = sendEventData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendEventData_result()
    result.success = self._handler.sendEventData(args.serverId, args.deviceId, args.eventType, args.eventTime, args.description, args.stringData, args.binaryData)
    oprot.writeMessageBegin("sendEventData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class sendTaskData_args:
  """
  Attributes:
   - serverId
   - deviceId
   - taskType
   - stringData
   - binaryData
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'serverId', None, None, ), # 1
    (2, TType.I64, 'deviceId', None, None, ), # 2
    (3, TType.STRING, 'taskType', None, None, ), # 3
    (4, TType.STRING, 'stringData', None, None, ), # 4
    (5, TType.STRING, 'binaryData', None, None, ), # 5
  )

  def __init__(self, serverId=None, deviceId=None, taskType=None, stringData=None, binaryData=None,):
    self.serverId = serverId
    self.deviceId = deviceId
    self.taskType = taskType
    self.stringData = stringData
    self.binaryData = binaryData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.serverId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.stringData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.binaryData = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendTaskData_args')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.I64, 1)
      oprot.writeI64(self.serverId)
      oprot.writeFieldEnd()
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 2)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.taskType is not None:
      oprot.writeFieldBegin('taskType', TType.STRING, 3)
      oprot.writeString(self.taskType)
      oprot.writeFieldEnd()
    if self.stringData is not None:
      oprot.writeFieldBegin('stringData', TType.STRING, 4)
      oprot.writeString(self.stringData)
      oprot.writeFieldEnd()
    if self.binaryData is not None:
      oprot.writeFieldBegin('binaryData', TType.STRING, 5)
      oprot.writeString(self.binaryData)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendTaskData_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendTaskData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendEventData_args:
  """
  Attributes:
   - serverId
   - deviceId
   - eventType
   - eventTime
   - description
   - stringData
   - binaryData
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'serverId', None, None, ), # 1
    (2, TType.I64, 'deviceId', None, None, ), # 2
    (3, TType.STRING, 'eventType', None, None, ), # 3
    (4, TType.I64, 'eventTime', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.STRING, 'stringData', None, None, ), # 6
    (7, TType.STRING, 'binaryData', None, None, ), # 7
  )

  def __init__(self, serverId=None, deviceId=None, eventType=None, eventTime=None, description=None, stringData=None, binaryData=None,):
    self.serverId = serverId
    self.deviceId = deviceId
    self.eventType = eventType
    self.eventTime = eventTime
    self.description = description
    self.stringData = stringData
    self.binaryData = binaryData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.serverId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.eventType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.eventTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.stringData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.binaryData = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendEventData_args')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.I64, 1)
      oprot.writeI64(self.serverId)
      oprot.writeFieldEnd()
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 2)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.eventType is not None:
      oprot.writeFieldBegin('eventType', TType.STRING, 3)
      oprot.writeString(self.eventType)
      oprot.writeFieldEnd()
    if self.eventTime is not None:
      oprot.writeFieldBegin('eventTime', TType.I64, 4)
      oprot.writeI64(self.eventTime)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.stringData is not None:
      oprot.writeFieldBegin('stringData', TType.STRING, 6)
      oprot.writeString(self.stringData)
      oprot.writeFieldEnd()
    if self.binaryData is not None:
      oprot.writeFieldBegin('binaryData', TType.STRING, 7)
      oprot.writeString(self.binaryData)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendEventData_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendEventData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
